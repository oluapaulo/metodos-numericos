import meep as mp
import matplotlib.pyplot as plt


def plot_epsilon(sim, filename="geometry4.png"):
    eps_data = sim.get_array(center=mp.Vector3(), size=sim.cell_size, component=mp.Dielectric)
    plt.imshow(eps_data.T, cmap='binary', origin='lower', interpolation='spline36')
    plt.colorbar(label="Epsilon")
    plt.title("Rede bidimensional infiniiiita")
    plt.savefig(filename)
    plt.close()


def main():
    resolution = 20  # pixels por unidade de comprimento (μm por exemplo)

    eps = 13  # dielétrico (exemplo: GaAs ou Si)
    eps1 = 1
    r = 0.4  # raio do buraco
    a = 1.0  # constante de rede (distância entre buracos)

    # Geometria: bloco infinito de dielétrico + 1 buraco no centro
    geometry = [
        mp.Block(size=mp.Vector3(mp.inf, mp.inf, mp.inf), material=mp.Medium(epsilon=eps)),
        mp.Cylinder(r, material=mp.Medium(epsilon=eps1))  # buraco central
    ]

    cell = mp.Vector3(a, a, 0)

    fcen = 0.25  # pulse center frequency
    df = 1.5  # pulse freq. width: large df = short impulse

    s = mp.Source(
        src=mp.GaussianSource(fcen, fwidth=df),
        component=mp.Hz,
        center=mp.Vector3(0.1234),
    )

    sym = mp.Mirror(direction=mp.Y, phase=-1)

    sim = mp.Simulation(
        cell_size=cell,
        geometry=geometry,
        sources=[s],
        symmetries=[sym],
        k_point=mp.Vector3(0, 0, 0),
        resolution=20,
    )
    kx = False  # if true, do run at specified kx and get fields
    if kx:
        sim.k_point = mp.Vector3(kx)

        sim.run(
            mp.at_beginning(mp.output_epsilon),
            mp.after_sources(mp.Harminv(mp.Hz, mp.Vector3(0.1234), fcen, df)),
            until_after_sources=300,
        )

        sim.run(mp.at_every(1 / fcen / 20, mp.output_hfield_z), until=1 / fcen)

    else:
        k_interp = 19  # # k-points to interpolate, otherwise

        sim.run_k_points(300, mp.interpolate(k_interp, [mp.Vector3(), mp.Vector3(0.5)]))

       
if __name__ == "__main__":
    main()
